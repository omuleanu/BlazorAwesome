@page "/GridReorderRows"
@using Omu.BlazorAwesome.Core
@implements IDisposable
@inject IJSRuntime JS
@inject IDbContextFactory<MyContext> cxf

<OGrid Opt="gopt"/>

<div class="expl ntben">
    We can drag and drop grid rows to reorder them.
</div>
<style>
    .rowDragHandle {
        display: inline-block;
        vertical-align: text-bottom;
        margin-right: .5em;
    }

    /*css.gg*/
    .gg-menu-grid-o {
        box-sizing: border-box;
        position: relative;
        display: block;
        transform: scale(1);
        width: 16px;
        height: 16px;
    }

        .gg-menu-grid-o::before {
            content: "";
            display: block;
            box-sizing: border-box;
            position: absolute;
            width: 4px;
            height: 4px;
            background: currentColor;
            box-shadow: 0 6px 0, 6px 6px 0, 12px 6px 0, 6px 12px 0, 12px 12px 0, 6px 0 0, 12px 0 0, 0 12px 0;
            border-radius: 22px;
        }
</style>
@code
{    
    private GridOpt<Lunch> gopt = new();
    private DotNetObjectReference<GridReorderRowsPage> objRef;
    private List<Lunch> list;

    protected override async Task OnInitializedAsync()
    {
        initGrid();

        using var mcx = cxf.CreateDbContext();

        list = await mcx.Lunches
            .Take(10)
            .Include(o => o.Food)
            .Include(o => o.Meals)
            .Include(o => o.Chef)
            .Include(o => o.Country)
            .ToListAsync();

        gopt.Load = true;

        if (gopt.State != null)
        {
            await gopt.State.LoadAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);

            await AweUtil.InitGridReorderRows(JS, new()
                {
                    Cont = gopt.State.Component.Div,
                    ObjRef = objRef,
                    DropMethod = nameof(MoveRow),
                    HandleSelector = ".rowDragHandle"
                });
        }
    }

    [JSInvokable]
    public async Task MoveRow(DropRes res)
    {
        var itmId = Convert.ToInt32(res.ItmKey);
        var index = res.Index;

        var itm = list.Single(l => l.Id == itmId);
        list.Remove(itm);
        list.Insert(index, itm);
        await gopt.State.LoadAsync();
    }

    private void initGrid()
    {
        gopt.Height = 350;

        gopt.KeyProp = m => m.Id;

        gopt.Load = false;
        gopt.Sortable = false;
        gopt.Groupable = false;
        gopt.DefaultKeySort = Sort.None;

        gopt.GetQuery = () => list.AsQueryable();

        gopt.Column(new()
            {
                For = m => m.Id,
                Width = 100,
                Render = dragCol
            });

        gopt.Column(new()
            {
                For = m => m.Person,
                Grow = 1.2,
            });

        gopt.Column(new()
            {
                For = m => m.Food.Name,
                Render = RenderComp.LunchImgFood,
                Header = "Food"
            });

        gopt.Column(new()
            {
                For = m => m.Country.Name,
                Header = "Country"
            });

        gopt.Column(new()
            {
                For = m => m.Date,
            });

        gopt.Column(new()
            {
                Header = "Meals",
                GetStr = o => string.Join(", ", o.Meals.Select(o => o.Name)),
                Grow = 1.3
            });

        gopt.Column(new()
            {
                For = m => m.Location
            });

        gopt.Column(new()
            {
                Header = "Chef",
                GetStr = o => o.Chef.FullName
            })
        .For(m => m.Chef.FirstName, m => m.Chef.LastName);
    }

    // drag handle column
    private RenderFragment dragCol(Lunch model)
    {
        return@<div><span class="rowDragHandle"><i class="gg-menu-grid-o"></i></span> @model.Id</div>;
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}