using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using Microsoft.AspNetCore.Components;
using Omu.BlazorAwesome.Core;
using Omu.BlazorAwesome.Models.Utils;

namespace Omu.BlazorAwesome.Models
{
    /// <summary>
    /// Grid column
    /// </summary>    
    public class Column<TModel>
    {
        private string header;
        private string id;
        private float grow;
        private string label;

        /// <summary>
        /// Column id, defaults to bind or header, can be autogenerated when not set or duplicate
        /// </summary>
        public string Id
        {
            get => id ?? Bind ?? header;
            set => id = value;
        }

        /// <summary>
        /// Header text
        /// </summary>
        public string Header
        {
            get => header ?? Bind;
            set => header = value;
        }

        /// <summary>
        /// Custom header render func
        /// </summary>
        public Func<RenderFragment> HeaderRender { get; set; }

        /// <summary>
        /// Label, can be used instead of header or bind for the columns picker dropdown
        /// </summary>
        public string Label
        {
            get => label;
            set => label = value;
        }

        /// <summary>
        /// Function to get cell string value from the row model
        /// </summary>
        public Func<TModel, string> GetStr { get; set; }

        /// <summary>
        /// Function to render the cell value 
        /// </summary>
        public Func<TModel, RenderFragment> Render { get; set; }

        /// <summary>
        /// Grid model property or properties this column is bound to, can use dot to indicate a nested property (example: Country.Name), 
        /// and/or comma to bind to multiple properties (example: FirstName,LastName);
        /// binding to "Name" will make the grid orderBy "Name" when this column has sorting Ast or Desc
        /// </summary>
        public string Bind { get; set; }

        /// <summary>
        /// Set Column.Bind using Expression;                
        /// </summary>
        public Expression<Func<TModel, object>> For
        {
            set
            {
                Bind = AweExprUtil.GetExpressionStr(value);
            }
        }

        /// <summary>
        /// Width
        /// </summary>
        public int Width { get; set; }

        /// <summary>
        /// Initial column sort type
        /// </summary>
        public Sort Sort { get; set; }

        /// <summary>
        /// Can sort this column
        /// </summary>
        public bool? Sortable { get; set; }

        /// <summary>
        /// Initial sorting rank
        /// </summary>
        public int? Rank { get; set; }

        /// <summary>
        /// Grouped column
        /// </summary>
        public bool Group { get; set; }

        /// <summary>
        /// Can group this column
        /// </summary>
        public bool? Groupable { get; set; }

        /// <summary>
        /// Can reorder this column
        /// </summary>
        public bool? Reorderable { get; set; }

        /// <summary>
        /// Can resize this column
        /// </summary>
        public bool? Resizable { get; set; }

        /// <summary>
        /// Min width
        /// </summary>
        public int MinWidth { get; set; }

        /// <summary>
        /// Css class to set for each cell in this grid column
        /// </summary>
        public string CssClass { get; set; }

        /// <summary>
        /// Css class to set for header cell
        /// </summary>
        public string HeaderCssClass { get; set; }

        /// <summary>
        /// By default all columns (without width defined) have Grow = 1;
        /// When the grid width is greater than the sum of widths of all columns ( Width or MinWidth or grid.ColumnWidth, whichever is defined)
        /// the remaining width is distributed to all the columns according to their Grow value
        /// </summary>
        public double Grow
        {
            get => grow;
            set => grow = (float)value;
        }

        /// <summary>
        /// Is column hidden
        /// </summary>
        public bool Hidden { get; set; }

        private bool? noHide;

        /// <summary>
        /// Cannot hide this column
        /// </summary>
        public bool NoHide
        {
            get
            {
                if (noHide.HasValue) return noHide.Value;

                return Header is null && Label is null;
            }

            set { noHide = value; }
        }

        /// <summary>
        /// Additional column options
        /// </summary>
        public Dictionary<ColumnOpt, object> Opt { get; set; }
    }
}