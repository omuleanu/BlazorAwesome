@page "/treegrid"
@using Omu.BlazorAwesome.Core

<OGrid Opt="gopt" />

@code
{
    private GridOpt<TreeNode> gopt = new();

    // lazy loaded nodes
    private Dictionary<int, TreeNode> loadedChildren = new();

    // load nodes up to this level
    private int maxLevel = 1;

    // nodes for which we haven't checked for children because we've reached maxLevel
    private Dictionary<int, TreeNode> lazyNodes = new();

    // nodes for which children have been loaded
    private Dictionary<int, TreeNode> loadedNodes = new();

    protected override void OnInitialized()
    {
        initGrid();
    }

    private void clearLoadedNodes()
    {
        loadedChildren.Clear();
        lazyNodes.Clear();
        loadedNodes.Clear();
    }

    private void initGrid()
    {
        gopt.KeyProp = m => m.Id;
        gopt.Height = 350;
        gopt.PageSize = 5;

        IQueryable<TreeNode> getQuery()
        {
            // not lazy load
            if (gopt.State.LoadOpt is null || !gopt.State.LoadOpt.Partial)
            {
                // clear loaded items on load
                clearLoadedNodes();
            }

            return Db.TreeNodes.AsQueryable();
        }

        gopt.LoadData = async () =>
        {
            var state = gopt.State;            

            var q = getQuery().AsQueryable();

            q = await state.ApplyFilters(q);

            var rootsq = q.Where(o => o.ParentId == null);
                                
            state.SetCount(rootsq.Count());

            state.Items = state.QueryPage(rootsq).ToArray();

            addChildrenFor(state.Items, q);
        };

        // load lazy items when clicking on expand
        gopt.LoadLazyNodeAsync = async (item) =>
        {            
            lazyNodes.Remove(item.Id);

            var newNodes = Db.TreeNodes.Where(o => o.ParentId == item.Id);

            addNodes(loadedChildren, newNodes);
            addChildrenFor(newNodes, Db.TreeNodes.AsQueryable());
        };

        // get child items for node if loaded
        gopt.GetChildren = (itm, lvl) =>
        {
            if (lazyNodes.ContainsKey(itm.Id))
            {
                return Awe.LazyNode;
            }

            return loadedChildren.Values.Where(o => o.ParentId == itm.Id);
        };

        gopt.Column(new() { For = o => o.Id, Width = 100 });
        gopt.Column(new() { For = o => o.Name });

        void addChildrenFor(IEnumerable<TreeNode> nodes, IQueryable<TreeNode> query, int lvl = 0)
        {
            var nextLevelChildren = new List<TreeNode>();

            foreach (var node in nodes)
            {
                // node children already loaded
                if (loadedNodes.ContainsKey(node.Id))
                {
                    continue;
                }

                // reached max level, add lazy nodes
                // remove block if you don't need lazy loading / lazy nodes
                else if (lvl == maxLevel)
                {
                    if (query.Any(o => o.ParentId == node.Id))
                    {
                        lazyNodes.Add(node.Id, node);
                    }
                }
                else
                // load children for node
                {
                    loadedNodes.Add(node.Id, node);
                    nextLevelChildren.AddRange(query.Where(o => o.ParentId == node.Id));
                }
            }

            // load next level
            if (nextLevelChildren.Any())
            {
                addChildrenFor(nextLevelChildren, query, lvl + 1);
                addNodes(loadedChildren, nextLevelChildren);
            }
        }
    }

    private void addNodes(Dictionary<int, TreeNode> dict, IEnumerable<TreeNode> nodes)
    {
        foreach (var node in nodes)
        {
            dict.Add(node.Id, node);
        }
    }
}